using System.IO;
using System.Linq;
using JetBrains.Annotations;
using Modding;
using UnityEngine;
using UnityEngine.UI;
using static Modding.CanvasUtil;
using Modding.Menu;
using Modding.Menu.Config;
using Patch = Modding.Patches;

namespace MoreSaves
{
    [UsedImplicitly]
    public class MoreSaves : Mod,IGlobalSettings<Settings>,ICustomMenuMod
    {
        private const string VERSION = "0.4.4";
        private static readonly string SavesFolder = Application.persistentDataPath;
        private static readonly string BackupFolder = SavesFolder + "/Saves Backup (Generated by MoreSaves)";

        private static GameObject _canvas;

        internal static MoreSaves Instance;

        public static Text PageLabel;

        public override string GetVersion()
        {
            return VERSION;
        }
        
        public static Settings settings { get; set; } = new Settings();
        public void OnLoadGlobal(Settings s) => MoreSaves.settings = s;
        public Settings OnSaveGlobal() => MoreSaves.settings;


        private MenuScreen menu;

        public MenuScreen GetMenuScreen(MenuScreen modListMenu)
        {
            if( !Directory.Exists(BackupFolder))
                Directory.CreateDirectory(BackupFolder);

            var mainmenu = new MenuBuilder(UIManager.instance.UICanvas.gameObject, "MoreSavesMenu")
                .CreateTitle("MoreSaves Settings", MenuTitleStyle.vanillaStyle)
                .CreateContentPane(RectTransformData.FromSizeAndPos(
                    new RelVector2(new Vector2(1920f, 903f)),
                    new AnchoredPosition(
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0f, -60f)
                    )
                ))
                .CreateControlPane(RectTransformData.FromSizeAndPos(
                    new RelVector2(new Vector2(1920f, 259f)),
                    new AnchoredPosition(
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0f, -502f)
                    )
                ))
                .SetDefaultNavGraph(new ChainedNavGraph())
                .AddContent(
                    RegularGridLayout.CreateVerticalLayout(105f),
                    c =>
                    {
                        c.AddKeybind(
                            "NextPage",
                            settings.keybinds.NextPage,
                            new KeybindConfig
                            {
                                Label = "Go to Next Page",
                                CancelAction = _ => UIManager.instance.UIGoToDynamicMenu(modListMenu)
                            }
                        ).AddKeybind(
                            "PreviousPage",
                            settings.keybinds.PreviousPage,
                            new KeybindConfig
                            {
                                Label = "Go to Previous Page",
                                CancelAction = _ => UIManager.instance.UIGoToDynamicMenu(modListMenu)
                            }
                        ).AddMenuButton(
                            "Make New Page",
                            new MenuButtonConfig
                            {
                                Label = "Make New Page",
                                SubmitAction = _ =>
                                {
                                    MoreSavesComponent._maxPages++;

                                    PlayerPrefs.SetInt("MaxPages", MoreSavesComponent._maxPages);
                                },
                                CancelAction = _ => UIManager.instance.UIGoToDynamicMenu(modListMenu),

                            }).AddMenuButton(
                            "Remove Last Page (if redundant)",
                            new MenuButtonConfig
                            {
                                Label = "Remove Last Page (if redundant)",
                                SubmitAction = _ =>
                                {
                                    if (Enumerable.Range(1, 8).Any(i =>
                                        File.Exists(
                                            $"{Application.persistentDataPath}/user{(MoreSavesComponent._maxPages - 1) * 4 + i}.dat")))
                                        return;
                                    PlayerPrefs.SetInt("MaxPages", --MoreSavesComponent._maxPages);
                                    PageLabel.text =
                                        $"Page {MoreSavesComponent._currentPage + 1}/{MoreSavesComponent._maxPages}";
                                },
                                CancelAction = _ => UIManager.instance.UIGoToDynamicMenu(modListMenu),

                            }).AddMenuButton(
                            "BackUpSaves",
                            new MenuButtonConfig
                            {
                                Label = "Back up Saves",
                                SubmitAction = BackupSaves,
                                CancelAction = _ => UIManager.instance.UIGoToDynamicMenu(modListMenu),

                            }).AddMenuButton(
                            "RestoreSaves",
                            new MenuButtonConfig
                            {
                                Label = "Restore Saves",
                                SubmitAction = _ => UIManager.instance.UIGoToDynamicMenu(menu),
                                CancelAction = _ => UIManager.instance.UIGoToDynamicMenu(modListMenu),

                            });
                    }
                )
                .AddControls(
                    new SingleContentLayout(new AnchoredPosition(
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0f, -64f)
                    )),
                    c => c.AddMenuButton(
                        "BackButton",
                        new MenuButtonConfig
                        {
                            Label = "Back",
                            CancelAction = _ => UIManager.instance.UIGoToDynamicMenu(modListMenu),
                            SubmitAction = _ => UIManager.instance.UIGoToDynamicMenu(modListMenu),
                            Style = MenuButtonStyle.VanillaStyle,
                            Proceed = true
                        }
                    )
                )
                .Build();
            menu = new MenuBuilder("Restore Saves")
                .CreateTitle("Restore Saves", MenuTitleStyle.vanillaStyle)
                .CreateContentPane(RectTransformData.FromSizeAndPos(
                    new RelVector2(new Vector2(1920f, 903f)),
                    new AnchoredPosition(
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0f, -60f)
                    )
                ))
                .CreateControlPane(RectTransformData.FromSizeAndPos(
                    new RelVector2(new Vector2(1920f, 259f)),
                    new AnchoredPosition(
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0f, -502f)
                    )
                ))
                .SetDefaultNavGraph(new ChainedNavGraph())
                .AddControls(
                    new SingleContentLayout(new AnchoredPosition(
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0.5f, 0.5f),
                        new Vector2(0f, -64f)
                    )),
                    c => c.AddMenuButton(
                        "BackButton",
                        new MenuButtonConfig
                        {
                            Label = "Back",
                            CancelAction = _ => UIManager.instance.UIGoToDynamicMenu(mainmenu),
                            SubmitAction = _ => UIManager.instance.UIGoToDynamicMenu(mainmenu),
                            Proceed = true,
                            Style = MenuButtonStyle.VanillaStyle
                        }
                    )
                ).AddContent(new NullContentLayout(), c => c.AddScrollPaneContent(
                    new ScrollbarConfig
                    {
                        CancelAction = _ => UIManager.instance.UIGoToDynamicMenu(mainmenu),
                        Navigation = new Navigation
                        {
                            mode = Navigation.Mode.Explicit,
                        },
                        Position = new AnchoredPosition
                        {
                            ChildAnchor = new Vector2(0f, 1f),
                            ParentAnchor = new Vector2(1f, 1f),
                            Offset = new Vector2(-310f, 0f)
                        }
                    },
                    new RelLength((Directory.GetFiles(BackupFolder).Length + 2) * 105f),
                    RegularGridLayout.CreateVerticalLayout(105f),
                    AddModMenuContent
                )).Build();
            
            

            return mainmenu;
        }
        
        private void AddModMenuContent(ContentArea c)
        {
            foreach(string saveFile in Directory.EnumerateFiles(BackupFolder))
            {
                string filename = Path.GetFileName(saveFile);

                if (!IsSaveFile(filename)) continue;
                
                string dest = SavesFolder +"/"+filename;

                c.AddMenuButton(
                    $"Restore {filename}",
                    new MenuButtonConfig
                    {
                        Label = $"Restore Save {filename.Replace("user","").Replace(".dat","")}",
                        SubmitAction = _ => File.Copy(saveFile, dest, true),
                        Style = MenuButtonStyle.VanillaStyle

                    });
            }
            c.AddTextPanel(
                "Refresh Pls",
                new RelVector2(new Vector2(800, 180)),
                new TextPanelConfig
                {
                    Anchor = TextAnchor.MiddleCenter,
                    Size = 45,
                    Font = TextPanelConfig.TextFont.TrajanBold,
                    Text = "Note: You may need to open and close a save to see backups made in this session",
                });
        }

        public override void Initialize()
        {
            if (Instance == null) Instance = this;
            Log("Initializing MoreSaves");

            CreateFonts();

            _canvas = CreateCanvas(RenderMode.ScreenSpaceOverlay, new Vector2(1920f, 1080f));

            PageLabel = CreateTextPanel
                (
                    _canvas, "Page 1/?", 29, TextAnchor.MiddleCenter,
                    new RectData
                    (
                        new Vector2(200f, 200f),
                        new Vector2(1240f, 870f),
                        new Vector2(0f, 0f),
                        new Vector2(0f, 0f)
                    )
                )
                .GetComponent<Text>();

            PageLabel.enabled = true;

            FadeOut(0f);
            _canvas.AddComponent<MoreSavesComponent>();
            Object.DontDestroyOnLoad(_canvas);
            Log("Initialized MoreSaves");

        }

        private static void FadeOut(float t)
        {
            PageLabel.CrossFadeAlpha(0f, t, true);
        }

        private bool IsSaveFile(string filename)
        {
            //ignore the other files in the folder
            if(!filename.StartsWith("user")) return false;
                
            //ignore the .bak files and the user .json files API or QoL creates
            if (!filename.EndsWith(".dat")) return false;
                
            //ignore the version labeled files
            if (filename.Contains("_")) return false;
                
            //ignore any weird userN(1).dat
            if (filename.Contains("(")) return false;

            return true;
        }

        private void BackupSaves(MenuButton obj)
        {
            if( !Directory.Exists(BackupFolder))
                Directory.CreateDirectory(BackupFolder);
            
            foreach(string saveFile in Directory.EnumerateFiles(SavesFolder))
            {
                string filename = Path.GetFileName(saveFile);

                string dest = BackupFolder +"/"+filename;
                
                if (!IsSaveFile(filename)) continue;
                
                //copy it in
                File.Copy( saveFile, dest, true );

                Debug.Log( "Copied " + saveFile + " to " + dest );
            }
        }
    }
}
